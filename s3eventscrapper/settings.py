"""
Django settings for s3eventscrapper project.

Generated by 'macetado/django-start-project' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
or
https://github.com/django/django/blob/stable/1.11.x/django/conf/global_settings.py
"""
import os
import urllib.parse

import environ


env = environ.Env()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str(
    'SECRET_KEY', default='f&uwf)hbej5kx9i25q5b-@yd#=0lc@o#&q=47-qv9unbeqa$2$')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)


# Hosts/domain names that are valid for this site.
# "*" matches anything, ".example.com" matches example.com and all subdomains
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['*'])


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'raven.contrib.django.raven_compat',
    'debug_toolbar',
    'django_celery_beat',
    'django_celery_results',
    'rest_framework',
    'corsheaders',
    'django_filters',
    'rest_framework_swagger',
    's3pooler.apps.S3PoolerConfig',
]


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases
DATABASES = {
    'default':{
        'NAME': env.str('EV_DB_NAME', ''),
        'ENGINE': env.str('EV_DB_ENGINE', ''),
        'USER': env.str('EV_DB_USER', ''),
        'PASSWORD': env.str('EV_DB_PASSWORD', ''),
        'HOST': env.str('EV_DB_HOST', ''),
        'PORT': env.str('EV_DB_PORT', '')
    },
    'app_db' : {
        'NAME': env.str('APP_DB_NAME', ''),
        'ENGINE': env.str('APP_DB_ENGINE', ''),
        'USER': env.str('APP_DB_USER', ''),
        'PASSWORD': env.str('APP_DB_PASSWORD', ''),
        'HOST': env.str('APP_DB_HOST', ''),
        'PORT': env.str('APP_DB_PORT', '')
    }
}


# EMAIL
vars().update(env.email_url('EMAIL_URL', default='consolemail://'))
DEFAULT_FROM_EMAIL = env.str(
    'DEFAULT_FROM_EMAIL', default='webmaster@localhost')


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
STATIC_URL = urllib.parse.urljoin(
    env.str('STATIC_HOST', default=''), '/static/')
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 's3eventscrapper/static'),
]
STATICFILES_STORAGE = \
    'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'


MEDIA_URL = urllib.parse.urljoin(env.str('MEDIA_URL', default=''), '/media/')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


ROOT_URLCONF = 's3eventscrapper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 's3eventscrapper/templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 's3eventscrapper.wsgi.application'

X_FRAME_OPTIONS = 'DENY'

USE_X_FORWARDED_HOST = not DEBUG

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


##############
# MIDDLEWARE #
##############
MIDDLEWARE = [
    'raven.contrib.django.raven_compat.middleware'
    '.SentryResponseErrorIdMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


############
# SESSIONS #
############
# Cache to store session data if using the cache session backend.
SESSION_CACHE_ALIAS = 'sessions'
# The module to store session data
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
# A string like "example.com", or None for standard domain cookie.
SESSION_COOKIE_DOMAIN = env.str('SESSION_COOKIE_DOMAIN', default=None)
# Whether the session cookie should be secure (https:// only).
SESSION_COOKIE_SECURE = not DEBUG


#########
# CACHE #
#########
# The cache backends to use.
CACHES = {
    'default': env.cache(
        'CACHES_DEFAULT_URL', default='locmemcache://unique-snowflake'),
    'sessions': env.cache(
        'CACHES_SESSIONS_URL', default='locmemcache://unique-snowflake'),
}


##################
# AUTHENTICATION #
##################
# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation'
                '.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation'
                '.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation'
                '.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation'
                '.NumericPasswordValidator',
    },
]


########
# CSRF #
########
CSRF_COOKIE_DOMAIN = env.str('CSRF_COOKIE_DOMAIN', default=None)
CSRF_COOKIE_SECURE = not DEBUG
CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS', default=[])


#######################
# SECURITY MIDDLEWARE #
#######################
SECURE_BROWSER_XSS_FILTER = not DEBUG
SECURE_CONTENT_TYPE_NOSNIFF = not DEBUG
SECURE_HSTS_INCLUDE_SUBDOMAINS = not DEBUG
SECURE_HSTS_PRELOAD = not DEBUG
SECURE_HSTS_SECONDS = 31536000
SECURE_SSL_HOST = env.str('SECURE_SSL_HOST', default=None)
SECURE_SSL_REDIRECT = not DEBUG


########################################################################
# Other apps
########################################################################

##########
# Celery #
##########
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_BROKER_URL = env.list('CELERY_BROKER_URL', default=None)
CELERY_TIMEZONE = TIME_ZONE
CELERY_RESULT_PERSISTENT = True
CELERY_RESULT_BACKEND = 'django-db'


#########
# RAVEN #
#########
RAVEN_CONFIG = {
    'dsn': env.str('RAVEN_CONFIG_DSN', default=None),
    'release': env.str('RELEASE'),
}


########################
# Django Debug Toolbar #
########################
DEBUG_TOOLBAR_CONFIG = {
    'SQL_WARNING_THRESHOLD': 100,
    'SHOW_TOOLBAR_CALLBACK': lambda request:
        request.user and
        request.user.is_superuser and (
            not request.is_ajax() or request.path.startswith('/__debug__/')
        )
}


#######################
# django-cors-headers #
#######################
CORS_ORIGIN_WHITELIST = env.list('CORS_ORIGIN_WHITELIST', default=[])
CORS_ORIGIN_REGEX_WHITELIST = env.list(
    'CORS_ORIGIN_REGEX_WHITELIST', default=[])


#########################
# django-rest-framework #
#########################
REST_FRAMEWORK = {
    # Base API policies
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_VERSIONING_CLASS':
        'rest_framework.versioning.AcceptHeaderVersioning',

    # Generic view behavior
    'DEFAULT_PAGINATION_CLASS':
        'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
        'django_filters.rest_framework.DjangoFilterBackend',
    ),

    # Pagination
    'PAGE_SIZE': 20,

    # Versioning
    'DEFAULT_VERSION': env.str('RELEASE'),
    'ALLOWED_VERSIONS': None,  # tuple

    # Testing
    'TEST_REQUEST_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
}

if DEBUG:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] += (
        'rest_framework.renderers.BrowsableAPIRenderer',
    )


#######################
# django-rest-swagger #
#######################
SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False,
    'APIS_SORTER': 'alpha',
    'VALIDATOR_URL': not DEBUG,
}
